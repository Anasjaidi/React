{"ast":null,"code":"var _jsxFileName = \"/Users/ajaidi/Documents/react/learn-react/practice-http/src/components/Meals/AvailableMeals.jsx\",\n  _s = $RefreshSig$();\nimport Card from '../UI/Card';\nimport MealItem from './MealItem/MealItem';\nimport classes from './AvailableMeals.module.css';\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_MEALS = [{\n  id: 'm1',\n  name: 'Sushi',\n  description: 'Finest fish and veggies',\n  price: 22.99\n}, {\n  id: 'm2',\n  name: 'n',\n  description: '1',\n  price: 16.5\n}, {\n  id: 'm3',\n  name: 'Barbecue Burger',\n  description: 'American, raw, meaty',\n  price: 12.99\n}, {\n  id: 'm4',\n  name: 'Green Bowl',\n  description: 'Healthy...and green...',\n  price: 18.99\n}];\nconst AvailableMeals = () => {\n  _s();\n  const [meals, setMeals] = useState([]);\n  const [httpErr, setHttpErr] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    (async () => {\n      const res = await fetch(\"https://react-http-54af6-default-rtdb.firebaseio.com/meals.jsn\");\n      const data = await res.json();\n      const loaded_meals = [];\n      for (let key in data) {\n        loaded_meals.push({\n          id: key,\n          name: data[key].name,\n          price: data[key].price,\n          description: data[key].description\n        });\n      }\n      console.log(loaded_meals);\n      setMeals(loaded_meals);\n      setIsLoading(false);\n    })().catch(err => {\n      setIsLoading(false);\n      setHttpErr(\"something wrong\");\n    });\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.loading,\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  } else if (httpErr) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.err,\n      children: httpErr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  }\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n_s(AvailableMeals, \"KpQScXmy1KJvoGIFtY+BX3jkjds=\");\n_c = AvailableMeals;\nexport default AvailableMeals;\nvar _c;\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"names":["Card","MealItem","classes","useEffect","useState","DUMMY_MEALS","id","name","description","price","AvailableMeals","meals","setMeals","httpErr","setHttpErr","isLoading","setIsLoading","res","fetch","data","json","loaded_meals","key","push","console","log","catch","err","loading","mealsList","map","meal"],"sources":["/Users/ajaidi/Documents/react/learn-react/practice-http/src/components/Meals/AvailableMeals.jsx"],"sourcesContent":["import Card from '../UI/Card';\nimport MealItem from './MealItem/MealItem';\nimport classes from './AvailableMeals.module.css';\nimport {useEffect, useState} from \"react\";\n\nconst DUMMY_MEALS = [\n    {\n        id: 'm1',\n        name: 'Sushi',\n        description: 'Finest fish and veggies',\n        price: 22.99,\n    },\n    {\n        id: 'm2',\n        name: 'n',\n        description: '1',\n        price: 16.5,\n    },\n    {\n        id: 'm3',\n        name: 'Barbecue Burger',\n        description: 'American, raw, meaty',\n        price: 12.99,\n    },\n    {\n        id: 'm4',\n        name: 'Green Bowl',\n        description: 'Healthy...and green...',\n        price: 18.99,\n    },\n];\n\nconst AvailableMeals = () => {\n    const [meals, setMeals] = useState([]);\n    const [httpErr, setHttpErr] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        (async () => {\n            const res = await fetch(\"https://react-http-54af6-default-rtdb.firebaseio.com/meals.jsn\");\n            const data = await res.json();\n\n            const loaded_meals = []\n\n            for (let key in data) {\n                loaded_meals.push({\n                    id: key,\n                    name: data[key].name,\n                    price: data[key].price,\n                    description: data[key].description,\n                })\n            }\n            console.log(loaded_meals)\n            setMeals(loaded_meals)\n            setIsLoading(false)\n        })().catch(err => {\n            setIsLoading(false)\n            setHttpErr(\"something wrong\")\n        })\n    }, [])\n\n    if (isLoading) {\n        return (\n            <p className={classes.loading}>\n                Loading...\n            </p>\n        )\n    } else if (httpErr) {\n        return (\n            <p className={classes.err}>\n                {httpErr}\n            </p>\n        )\n    }\n\n    const mealsList = meals.map((meal) => (\n        <MealItem\n            key={meal.id}\n            id={meal.id}\n            name={meal.name}\n            description={meal.description}\n            price={meal.price}\n        />\n    ));\n\n    return (\n        <section className={classes.meals}>\n            <Card>\n                <ul>{mealsList}</ul>\n            </Card>\n        </section>\n    );\n};\n\nexport default AvailableMeals;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}